//////////////// ITEM
// test constructors
Item itemNonBulk = new Item("'Java Rules!' button", 0.99) // non-bulk item
Item itemBulk = new Item("'Java Rules!' button", 0.99, 10, 5.0) // bulk-item

// constructors error with negative numbers
Item bad0 = new Item("blahrah", -5);
Item bad1 = new Item("blahrah", -5, 10, 3);
Item bad2 = new Item("blahrah", 5, -10, 3);
Item bad3 = new Item("blahrah", 5, 10, -3);

// get prices for non-bulk item
Item itemNonBulk = new Item("'Java Rules!' button", 0.99)
itemNonBulk.priceFor(6) //sb 6 * 0.99 = 5.94

// get price while negative should error for non-bulk items
Item itemNonBulk = new Item("'Java Rules!' button", 0.99)
itemNonBulk.priceFor(-10)

// get prices for bulk item
// logic should always apply bulk pricing first the
// calculate non-bulk items last

Item itemBulk = new Item("'Java Rules!' button", 0.99, 10, 5.0)
//// non bulk price of 0.99 * quantity 5 = 4.95
System.out.println(itemBulk.priceFor(5) == 4.95)

//// now qty 10 sb 5
System.out.println(itemBulk.priceFor(10) == 5)

//// qty 22 sb (5 * 2) + (.99 * 2) = 11.98
itemBulk.priceFor(22)

//// qty 39 sb (5 * 3) + (.99 * 9) = 23.91
itemBulk.priceFor(39)

// test toString result for both nonBulk and bulk items
// also leveraging NumberFormat to state (double) price into (string) currency
Item itemNonBulk = new Item("'Java Rules!' button", 0.99)
System.out.println(itemNonBulk.toString())

Item itemBulk = new Item("'Java Rules!' button", 0.99, 10, 5.0)
System.out.println(itemBulk.toString())

//////////////// CATALOG
// create new catalog
Catalog thingoling = new Catalog("stufftosell");

// random items
Item item1 = new Item("Computer Science Barbie", 19.99)
Item item2 = new Item("'Java Rules!' button", 0.99, 10, 5.0)
Item item3 = new Item("'Java Rules!' bumper sticker", 0.99, 20, 8.95)

// try adding random items to thingoling catalog
thingoling.add(item1)
thingoling.add(item2)
thingoling.add(item3)

// validate that thingoling new contains 3 items
System.out.println(thingoling.size())

// try getting an item out of the catalog
// should print 'Java Rules' button toString result
System.out.println(thingoling.get(1))

// get the catalog's name
System.out.println(thingoling.getName())






//////////// ITEMORDER
Item item3 = new Item("'Java Rules!' bumper sticker", 0.99, 20, 8.95)
ItemOrder iwantthis = new ItemOrder(item3, 30)

// check how much this ItemOrder costs
// sb (1 * 8.95) + (10 * 0.99) = 18.85
System.out.println("Price: " + iwantthis.getPrice())

// validate that an item is returned when getItem() is called
System.out.println("Item: " + iwantthis.getItem())








//////////// SHOPPING CART
// testing discount boolean
ShoppingCart cartofgoodies = new ShoppingCart()
System.out.println("default boolean")
System.out.println(cartofgoodies.getDiscount())
System.out.println("set true")
cartofgoodies.setDiscount(true)
System.out.println(cartofgoodies.getDiscount())
System.out.println("set false")
cartofgoodies.setDiscount(false)
System.out.println(cartofgoodies.getDiscount())

// adding items + getting totals
// TODO THIS TEST NO LONGER IS VALID AFTER WRITING ADD/DROP LOGIC
ShoppingCart cartofgoodies = new ShoppingCart()
Item item3 = new Item("'Java Rules!' bumper sticker", 0.99, 20, 8.95)
ItemOrder iwantthis = new ItemOrder(item3, 30)
cartofgoodies.add(iwantthis)
// expecting ( (1 * 8.95) + (10 * 0.99) ) * 3 = 56.55
System.out.println(cartofgoodies.getTotal())
// now set the discount and see the price change
// expecting 56.55 * .9 = 50.90
cartofgoodies.setDiscount(true)
System.out.println(cartofgoodies.getTotal())
// set the discount back to off and validate the total
// comes back to 56.55
cartofgoodies.setDiscount(false)
System.out.println(cartofgoodies.getTotal())


// replacing items that already exist in the shopping cart
// requirement is not to the same item over and over.
// instead, if an item is already added, remove it and keep
// the latest entry
ShoppingCart cartofgoodies = new ShoppingCart()
Item item3 = new Item("'Java Rules!' bumper sticker", 0.99, 20, 8.95)
Item item4 = new Item("Something else", 0.89, 10, 7.00)
ItemOrder iwantthis = new ItemOrder(item3, 3)
ItemOrder iwantthat = new ItemOrder(item3, 3)
ItemOrder iwantthose = new ItemOrder(item4, 12)
cartofgoodies.add(iwantthis)
System.out.println(cartofgoodies.getTotal())
cartofgoodies.add((iwantthat))
System.out.println(cartofgoodies.getTotal())

// shopping cart testing
// adding items + getting totals + setting discount
ShoppingCart cartofgoodies = new ShoppingCart()
Item item1 = new Item("Computer Science Barbie", 19.99)
Item item2 = new Item("'Java Rules!' button", 0.99, 10, 5.0)
Item item3 = new Item("'Java Rules!' bumper sticker", 0.99, 20, 8.95)
ItemOrder iwantthis = new ItemOrder(item1, 3)
ItemOrder iwantthat = new ItemOrder(item2, 15)
ItemOrder iwantthose = new ItemOrder(item3, 15)
cartofgoodies.add(iwantthis)
cartofgoodies.add(iwantthat)
cartofgoodies.add(iwantthose)
// expecting    (19.99 * 3) = 59.97             // barbies
//              (5 * 1) + (5 * .99) = 9.95      // buttons
//              (15 * .99) = 14.85              // stickers
//              59.97 + 9.95 + 14.85 = 84.77    // cart total
System.out.println("Cart total wo discount: " + cartofgoodies.getTotal())
// now set the discount and see the price change
// expecting 84.77 * .9 = 76.29
cartofgoodies.setDiscount(true)
System.out.println("Cart total with discount: " + cartofgoodies.getTotal())

// shopping cart add already existing item walkthrough
// shopping cart should REPLACE an ItemOrder if
// the item is already present in the shopping cart.

ShoppingCart cartofgoodies = new ShoppingCart() // create cart
Item item1 = new Item("'Java Rules!' button", 0.99, 10, 5.0) // create item

// three different ItemOrder of the same item with different quantities
ItemOrder itemorder1 = new ItemOrder(item1, 3)
ItemOrder itemorder2 = new ItemOrder(item1, 5)
ItemOrder itemorder3 = new ItemOrder(item1, 0)

// adding first ItemOrder, expecting cart total (0.99 * 3) = 2.97
cartofgoodies.add(itemorder1)
System.out.println("Cart total after 1st ItemOrder: " + cartofgoodies.getTotal())

// replace with next ItemOrder of new quantity 5
// cart will remove previous ItemOrder since it's the same item
// expecting (.99 * 5) = 4.95
cartofgoodies.add(itemorder2)
System.out.println("Cart total after 2st ItemOrder: " + cartofgoodies.getTotal())

// replace with next ItemOrder of new quantity 0
// cart will remove previous ItemOrder since it's the same item
// expecting (.99 * 0) = 0.00
cartofgoodies.add(itemorder3)
System.out.println("Cart total after 3rd ItemOrder: " + cartofgoodies.getTotal())
